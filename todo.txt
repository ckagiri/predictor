- upgrade webpack to 5
- fix html webpack plugin with webpack 5
- upgrade typescript
- upgrade rxjs


use createReactApp typescript version
login app

save vs insert?

use seasonId, suffix ids

predictions dont have gameRoundPicks

fix leaderboard tests

work on processes

punt:
>>>> jokers
findOrCreateJoker(userId, roundId)
findOneOrCreate(userId, matchId) --> [findOrCreatePrediction(userId, matchId)]
findOrCreatePredictions(userId, roundId)
findOrUpdatePrediction(userId, matchId, choice)
pickJoker(userId, matchId)
unsetJoker(userId, match)
findOrCreatePicks() { isComputerGenerated? }

findOrCreatePicks -> optimize, get matches - zip em with prediction, get match odds; use VosePredictor
findOneOrCreate -> optimize pass full match not matchId

processor -> createPredictionsIfNotExist(roundId) -> findOrCreateJoker, (findOrCreatePredictions -> findOrCreatePrediction)
processor -> unsetJokers(matchId) -> unsetJoker

UI -> load-page [findOrCreatePredictions], pick-joker [pickJoker],
  change prediction-score [findOrUpdatePrediction], lucky-spin [findOrCreatePicks]
events -> match status changed [unsetJokers, processPredictions], new match round [findOrCreatePredictions]

match finished/cancelled/postponed? or not scheduled/timed?
<<<< jokers

<<< grouping
- name, teams
- match has gameRound, grouping { Group A, Round of 16, Quarter-finals, Semi-finals, Final, Third-place }
- compe has-groupings
>>> groupings

<<< stadiums
- name
- compe has stadiums
- team has stadium
- ui default to homeTeam if has stadium, drop-down or autocomplete better
<<< stadiums

dao should be composed not inherited base-repo
vose predictor laterz
refactor tests undefined types

<<< userScore
- findScoreAndUpsert
>>>

<<< gameRound
  add jokerPickable? -> for last 8 wc
>>>

<<< frontend
  add slug to gameRound
  create constants

  merge findAll and find
  in matchRep findAll -> change
  if has team filter then add home&away to criteria;
  conditions: criteria, filter, sort, range
  test matchRepo spec findAll(conditions, projections, options)
>>>>


<<<deprecations
npm WARN deprecated @types/mongoose@5.11.97: Mongoose publishes its own types, so you do not need to install this package.
npm WARN deprecated bcrypt-nodejs@0.0.3: bcrypt-nodejs is no longer actively maintained. Please use bcrypt or bcryptjs. See https://github.com/kelektiv/node.bcrypt.js/wiki/bcrypt-vs-brypt.js to learn more about these two options
npm WARN deprecated request-promise@4.2.6: request-promise has been deprecated because it extends the now deprecated request package, see https://github.com/request/request/issues/3142
npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142
npm WARN deprecated mocha-typescript@1.1.17: mocha-typescript has been deprecated, use @testdeck/mocha instead
npm WARN deprecated superagent@7.1.2: Deprecated due to bug in CI build https://github.com/visionmedia/superagent/pull/1677\#issuecomment-1081361876
npm WARN deprecated @types/chai-http@4.2.0: This is a stub types definition. chai-http provides its own type definitions, so you do not need this installed.
npm WARN deprecated har-validator@5.1.5: this library is no longer supported
npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.
npm WARN deprecated superagent@3.8.3: Please upgrade to v7.0.2+ of superagent.  We have fixed numerous issues with streams, form-data, attach(), filesystem errors not bubbling up (ENOENT on attach()), and all tests are now passing.  See the releases tab for more information at <https://github.com/visionmedia/superagent/releases>.
npm WARN deprecated formidable@1.2.6: Please upgrade to latest, formidable@v2 or formidable@v3! Check these notes: https://bit.ly/2ZEqIau
>>>

@testdeck/mocha? use?

<<<
auth - simple auth
remove fb/google/twitter
oauth after react
create prediction
end goal docker with api, postman collection
seeder -> worldcup -> stadiums, groupings
dockerize -> node + mongodb
deploy to aws, heroku, digital-ocean?
>>>

<<<
fix tests
update match model & repo
update leaderboard model & repo
update score model & repo
update gameplay & tests
move tests to jest pain?
env setup?
>>>


<<<
/game -> /game/competitions
{
  competions: [],
  defaultCompetition: {
    record: {},
    seasons: [],
    currentSeason: {
      record: {},
      teams: [],
      stadiums?: [],
      groupings?: [],
      gameRounds: [],
      currentGameRound: { <- last if finished
        record: {},
        matches: [] <- with or without predictions
      }
    }
  }
}
competitions ->
api/game -> api/game/competitions
api/game/competitions/:competition-slug
api/game/competitions/:competition-slug/:season-slug
api/game/competitions/:competition-slug/:season-slug/round-slug or round-position
getCompetition -> apiCompetition
getSeason -> gameSeason
getRound -> gameRound
game -> /game GameController /game-season /
competitions/english-premier-league/2020/gameweek-1
competitions
world-cup | matches | seasons
english-premier-league
seasons
2021-22 matches
>>>


fix mongoose merge (cleanup)
fix points resultPoints scorePoints

>>>>
update leaderboard processors to update match globalscores/rankings status

>>>>
handle client-side filters

chai-assertions-count

crypto
passport
express-jwt
passport-local
jsonwebtoken

>>>>>
id toString remove
update matches process status in schedulers
test calculatePoints
test processLeaderboards
onMatchRound ifCurrentRound position Changed
findOrCreatePredictions timer
updateScorenRankings timer
>>>>
