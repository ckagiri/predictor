---
name: Continous Deployment
on:
  push:
    branches:
      - deploy2
env:
  API_FOOTBALL_DATA_KEY: ${{secrets.API_FOOTBALL_DATA_KEY}}
  MONGO_URI: ${{secrets.MONGO_URI}}
jobs:
  push_to_registry:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create prod env file
        run: |
          cat <<EOF > config/prod.env
          API_FOOTBALL_DATA_KEY=$API_FOOTBALL_DATA_KEY
          DATA_OPTION=cloud_mongo
          MONGO_URI=$MONGO_URI
          NODE_ENV=production
          PORT=3110
          EOF
          touch config/dev.env
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push ligi-api
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./config/server/Dockerfile
          build-args: |
            APP_ENV=prod
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ligi:api
          cache-from: type=gha
          cache-to: type=gha, mode=max

      - name: Build and push ligi-web
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./config/client/Dockerfile
          target: prod
          build-args: |
            VITE_API_URL_ARG=${{ secrets.VITE_API_URL }}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ligi:web
          cache-from: type=gha
          cache-to: type=gha, mode=max

      - name: Build and push ligi-nginx
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./config/nginx/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/ligi:nginx
          cache-from: type=gha
          cache-to: type=gha, mode=max
  deploy_via_ssh:
    needs: push_to_registry
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "Generating .env file"
          echo "DOCKER_USERNAME=${{secrets.DOCKER_USERNAME}}" >> .env
          echo "HOST_DOMAIN=${{secrets.HOST_DOMAIN}}" >> .env
          echo "HOME_PORT=${{secrets.HOME_PORT}}" >> .env
          echo "LETSENCRYPT_EMAIL=${{secrets.LETSENCRYPT_EMAIL}}" >> .env

      # Copy docker-compose and .env files to target server
      - name: Copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          port: 22
          key: ${{ secrets.DEPLOY_KEY }}
          source: "./docker-compose-prod.yml,./.env"
          target: "~/.deploy/${{ github.event.repository.name }}/"

      # Deploy Docker image with your application using `docker compose up app` remotely
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v1.2.2
        env:
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USERNAME }}
          key: ${{ secrets.DEPLOY_KEY }}
          port: 22
          envs: DOCKER_PASSWORD,DOCKER_USERNAME
          script: |
            echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            echo "ðŸ”„ Pulling latest images..."
            docker compose -f ./docker-compose-prod.yml pull

            echo "ðŸ›‘ Stopping old containers..."
            docker compose -f ./docker-compose-prod.yml down --remove-orphans

            echo "ðŸ§¼ Pruning unused resources..."
            docker image prune -f
            docker volume prune -f

            echo "ðŸš€ Starting fresh stack..."
            docker compose -f ./docker-compose-prod.yml up -d
