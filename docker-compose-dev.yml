name: ligi-dev
services:
  api:
    image: ligi-server-dev
    build:
      dockerfile: ./config/server/Dockerfile
      context: .
      target: dev
    environment:
      EXECUTION_ENGINE: tsx
      MONGO_HOSTNAME: db
    ports:
      - "3110:3110"
    depends_on:
      seeder:
        condition: service_completed_successfully
    volumes:
      - ./backend/src:/app/src
    networks:
      - app-network
  db:
    image: mongo:7.0.22-jammy
    restart: unless-stopped
    ports:
      - "27070:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - dbdata:/data/db
    networks:
      - app-network
  seeder:
    build:
      dockerfile: ./config/server/Dockerfile
      context: .
      target: seeder
    depends_on:
      db:
        condition: service_healthy
    env_file: ./config/dev.env
    environment:
      MONGO_HOSTNAME: db
    healthcheck:
      test: ["CMD", "node", "seeder-healthcheck.js"]
      interval: 15s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  web:
    image: ligi-client-dev
    depends_on:
      - api
    environment:
      VITE_API_URL: http://localhost:3110/api # Example for local backend
    develop:
      watch:
        - action: sync
          path: ./frontend
          target: /app
          # exclude patterns within ./src
          ignore:
            - "**/*.test.ts" # Example: don't sync test files
        - action: rebuild
          path: package.json
        - action: rebuild
          path: package-lock.json
    stdin_open: true
    tty: true
    build:
      dockerfile: ./config/client/Dockerfile
      context: .
      target: dev
    ports:
      - "8040:8040"
    volumes:
      - /app/node_modules # anon vol to keep node_modules inside container
    networks:
      - app-network

  nginx:
    image: ligi-nginx-dev
    depends_on:
      - api
      - web
    restart: always
    build:
      dockerfile: ./config/nginx/Dockerfile
      context: .
    ports:
      - "8100:8100"
    networks:
      - app-network

volumes:
  dbdata:

networks:
  app-network:
    driver: bridge
