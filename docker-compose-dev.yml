services:
  # api:
  #   image: ligi-api-dev
  #   build:
  #     dockerfile: ./config/server/dev/Dockerfile
  #     context: .
  #     target: dev
  #   depends_on:
  #     seeder:
  #       condition: service_completed_successfully
  #   volumes:
  #     - ./backend/src:/app/src
  #   networks:
  #     - app-network
  db:
    image: mongo:7.0.22-jammy
    restart: unless-stopped
    ports:
      - "27070:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - dbdata:/data/db
    networks:
      - app-network
  seeder:
    build:
      dockerfile: ./config/server/dev/Dockerfile
      context: .
      target: seeder
    depends_on:
      db:
        condition: service_healthy
    env_file: ./config/server/dev/server.env
    environment:
      - MONGO_HOSTNAME=db
    healthcheck:
      test: ["CMD", "node", "seeder-healthcheck.js"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

#   client:
#     image: ligi-client-dev
#     depends_on:
#       - api
#     stdin_open: true
#     build:
#       dockerfile: ./config/client/dev/Dockerfile
#       context: .
#     ports:
#       - "8040:8040"
#     volumes:
#       - ./frontend/src:/app/src
#     networks:
#       - app-network

#   nginx:
#     image: ligi-nginx-dev
#     depends_on:
#       - api
#       - client
#     restart: always
#     build:
#       dockerfile: ./config/nginx/Dockerfile
#       context: .
#     ports:
#       - "8100:8100"
#     networks:
#       - app-network

volumes:
  dbdata:

networks:
  app-network:
    driver: bridge
